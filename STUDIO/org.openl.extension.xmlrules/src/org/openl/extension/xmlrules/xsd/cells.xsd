<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<xs:schema version="1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema">

  <xs:element name="cells" type="cells"/>

  <xs:complexType name="cells">
    <xs:sequence>
      <xs:element name="cell" type="cell" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="cell">
    <xs:sequence>
      <xs:element name="address" type="xs:string"/>
      <xs:choice>
        <xs:element name="string-node" type="string-node"/>
        <xs:element name="number-node" type="number-node"/>
        <xs:element name="boolean-node" type="boolean-node"/>
        <xs:element name="range-node" type="range-node"/>
        <xs:element name="expression-node" type="expression-node"/>
        <xs:element name="function-node" type="function-node"/>
        <xs:element name="if-node" type="if-node"/>
      </xs:choice>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="string-node">
    <xs:complexContent>
      <xs:extension base="node">
        <xs:sequence>
          <xs:element name="value" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="node" abstract="true">
    <xs:sequence/>
  </xs:complexType>

  <xs:complexType name="number-node">
    <xs:complexContent>
      <xs:extension base="node">
        <xs:sequence>
          <xs:element name="value" type="xs:double"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="boolean-node">
    <xs:complexContent>
      <xs:extension base="node">
        <xs:sequence>
          <xs:element name="value" type="xs:boolean"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="range-node">
    <xs:complexContent>
      <xs:extension base="node">
        <xs:sequence>
          <xs:element name="range" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="expression-node">
    <xs:complexContent>
      <xs:extension base="node">
        <xs:sequence>
          <xs:choice>
            <xs:element name="left-string-node" type="string-node"/>
            <xs:element name="left-number-node" type="number-node"/>
            <xs:element name="left-boolean-node" type="boolean-node"/>
            <xs:element name="left-range-node" type="range-node"/>
            <xs:element name="left-expression-node" type="expression-node"/>
            <xs:element name="left-function-node" type="function-node"/>
            <xs:element name="left-if-node" type="if-node"/>
          </xs:choice>
          <xs:element name="operator" type="xs:string"/>
          <xs:choice>
            <xs:element name="right-string-node" type="string-node"/>
            <xs:element name="right-number-node" type="number-node"/>
            <xs:element name="right-boolean-node" type="boolean-node"/>
            <xs:element name="right-range-node" type="range-node"/>
            <xs:element name="right-expression-node" type="expression-node"/>
            <xs:element name="right-function-node" type="function-node"/>
            <xs:element name="right-if-node" type="if-node"/>
          </xs:choice>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="function-node">
    <xs:complexContent>
      <xs:extension base="node">
        <xs:sequence>
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="string-node" type="string-node"/>
            <xs:element name="number-node" type="number-node"/>
            <xs:element name="boolean-node" type="boolean-node"/>
            <xs:element name="range-node" type="range-node"/>
            <xs:element name="expression-node" type="expression-node"/>
            <xs:element name="function-node" type="function-node"/>
            <xs:element name="if-node" type="if-node"/>
          </xs:choice>
          <xs:element name="name" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="if-node">
    <xs:complexContent>
      <xs:extension base="node">
        <xs:sequence>
          <xs:choice>
            <xs:element name="condition-string-node" type="string-node"/>
            <xs:element name="condition-number-node" type="number-node"/>
            <xs:element name="condition-boolean-node" type="boolean-node"/>
            <xs:element name="condition-range-node" type="range-node"/>
            <xs:element name="condition-expression-node" type="expression-node"/>
            <xs:element name="condition-function-node" type="function-node"/>
            <xs:element name="condition-if-node" type="if-node"/>
          </xs:choice>
          <xs:choice>
            <xs:element name="else-string-node" type="string-node"/>
            <xs:element name="else-number-node" type="number-node"/>
            <xs:element name="else-boolean-node" type="boolean-node"/>
            <xs:element name="else-range-node" type="range-node"/>
            <xs:element name="else-expression-node" type="expression-node"/>
            <xs:element name="else-function-node" type="function-node"/>
            <xs:element name="else-if-node" type="if-node"/>
          </xs:choice>
          <xs:choice>
            <xs:element name="then-string-node" type="string-node"/>
            <xs:element name="then-number-node" type="number-node"/>
            <xs:element name="then-boolean-node" type="boolean-node"/>
            <xs:element name="then-range-node" type="range-node"/>
            <xs:element name="then-expression-node" type="expression-node"/>
            <xs:element name="then-function-node" type="function-node"/>
            <xs:element name="then-if-node" type="if-node"/>
          </xs:choice>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:schema>

